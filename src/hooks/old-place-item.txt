function placeItem(rowIndex: number, colIndex: number) {
  console.log("handleGridClick: ", { rowIndex, colIndex, itemActive });

  if (!itemActive || !areaActive) return;

  const item = [...topItem, ...bottomItem].find((i) => i.id === itemActive);
  if (!item) return;

  console.log("Found item:", item);

  // Check if the item can be placed in this area
  if (item.rack !== areaActive.area) return;

  // Create a copy of the items array
  const newItems = areaActive.items.map((row) => [...row]);

  // Check if the space is available
  const canPlace = checkSpaceAvailability(newItems, rowIndex, colIndex, item);
  if (!canPlace) return;

  // Place the item
  const placedItem: IItemPlaced = {
    id: item.id,
    name: item.name,
    image: item.image.startsWith("/") ? item.image : `/${item.image}`,
    amount: 1,
    blockWidth: item.blockWidth,
    blockHeight: item.blockHeight,
    rack: item.rack,
    dock: item.dock,
  };

  console.log("Placed item:", placedItem);

  // Update the grid with the placed item
  for (let i = 0; i < item.blockHeight; i++) {
    for (let j = 0; j < item.blockWidth; j++) {
      if (rowIndex + i < newItems.length && colIndex + j < newItems[0].length) {
        // Fill each cell with the complete item data
        newItems[rowIndex + i][colIndex + j] = {
          ...placedItem,
          // Add position information
          position: {
            row: rowIndex,
            col: colIndex,
          },
        };
      }
    }
  }

  console.log("Updated grid:", newItems);

  // Update both areaActive and rackState
  const updatedArea = {
    ...areaActive,
    items: newItems,
  };
  setAreaActive(updatedArea);

  // Update rackState
  setRackState((prev) =>
    prev.map((rack) => (rack.area === areaActive.area ? updatedArea : rack))
  );

  // Update item quantity in topItem or bottomItem
  if (item.dock === "top") {
    setTopItem((prev) =>
      prev.map((i) =>
        i.id === item.id ? { ...i, totalQty: Math.max(0, i.totalQty - 1) } : i
      )
    );
  } else {
    setBottomItem((prev) =>
      prev.map((i) =>
        i.id === item.id ? { ...i, totalQty: Math.max(0, i.totalQty - 1) } : i
      )
    );
  }

  // Deselect the item
  setItemActive(null);
}


function checkSpaceAvailability(
    grid: (IItemPlaced | null)[][],
    rowIndex: number,
    colIndex: number,
    item: (typeof refrigeratorItems)[0]
  ): boolean {
    // Check if the space is available
    for (let i = 0; i < item.blockHeight; i++) {
      for (let j = 0; j < item.blockWidth; j++) {
        if (
          rowIndex + i >= grid.length ||
          colIndex + j >= grid[0].length ||
          grid[rowIndex + i][colIndex + j] !== null
        ) {
          return false;
        }
      }
    }
    return true;
  }
